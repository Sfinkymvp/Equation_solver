#ifndef TESTS_H_
#define TESTS_H_


#include "constants.h"


/// Показывает, верно ли решено уравнение или нет
typedef enum {
    TEST_ERR = 0,    ///< Уравнение решено не верно
    TEST_OK = 1      ///< Уравнение решено верно
} Test_status;


/// Сравнивает пользовательское решение уравнения с эталонным (верным)
typedef struct {
    Test_status status;    ///< Статус корректности пользовательского решения
    Equation eq;           ///< Пользовательское решение уравнения
    Equation ref;          ///< Эталонное решение уравнения
} Test_equation;


/// Структура описывает динамический массив с пользовательскими тестами
typedef struct {
    Test_equation *equations;    ///< Динамический массив с уравнениями
    int len;                     ///< Количество имеющихся уравнений
    int cap;                     ///< Количество мест в массиве
} Tests;


/// Тестирует корректность решений заданных квадратных уравнений
/// @return true - все тесты пройдены; false - не все тесты пройдены
void run_tests(Tests *tests);


/// Проверяет корректность решения одного квадратного уравнения
/// @param eq Указатель на структуру, в которой находится проверяемое квадратное уравнение
/// @param eq_ref Указатель на структуру, в которой находится корректные решения квадратного уравнения
/// @return true - уравнение решено корректно; false - уравнение решено неверно
void solve_test(Test_equation *test);


/// Проверяет, все ли тесты оказались корректными
/// @param tests Динамический массив для хранения уравнений (тестов)
void is_tests_correct(Tests *tests);


#endif  //  TESTS_H_
