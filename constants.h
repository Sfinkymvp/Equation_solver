#ifndef CONSTANTS_H_
#define CONSTANTS_H_


/// Максимально количество корней квадратного уравнения
const int MAX_ROOTS = 2;


/// Допустимая погрешность для операций с числами с плавающей точкой
const double EPS = 0.00000001;


/// Максимальная допустимая длина ответов пользователя
const int MAX_BUFFER_LEN = 100;


/// Начальная вместимость динамического массива с тестами
const int START_TESTS_CAP = 8;


/// Цвет для печати ошибок
#define RED "\033[31m"


/// Цвет для печати успешного действия
#define GREEN "\033[32m"


/// Стандартный цвет текста
#define DEFAULT "\e[0m" 


/// Возможные варианты числа решений уравнения не выше второй степени
typedef enum {
    NO_ROOTS = 0,         ///< Отсутствие решений
    ONE_ROOT = 1,         ///< Один действительное решение
    TWO_ROOTS = 2,        ///< Два действительных решения
    INFINITE_ROOTS = -1,  ///< Бесконечное число решений 
} Equation_roots_count;


/// Возможные режимы ввода в меню
typedef enum {
    KEYBOARD_INPUT = '1',   ///< Ввод с клавиатуры
    INPUT_FROM_FILE = '2',  ///< Чтение коэффициентов из файла
    QUIT = '3'              ///< Завершение программы
} Input_mode;
 
       
/**
* Структура для хранения данных об уравнении не выше второй степени
*
* Вид квадратного уравнения: ax^2 + bx + c = 0
*
* Вид линейного уравнения: bx + c = 0
*
* Вид ложного равенства: c = 0 (При с != 0)
*
* Вид тождества: c = 0 (При c = 0)
*/
typedef struct {
    double a;                     ///< Коэффициент a при x^2
    double b;                     ///< Коэффициент b при x
    double c;                     ///< Свободный коэффициент c
    Equation_roots_count r_count; ///< Количество корней уравнения
    double roots[MAX_ROOTS];      ///< Массив для хранения корней (До 2 корней)
} Equation;


#endif  //  CONSTANTS_H_
